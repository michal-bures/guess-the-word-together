name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect changes in monorepo packages
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'packages/backend/**'
              - 'packages/shared/**'
            frontend:
              - 'packages/frontend/**'
              - 'packages/shared/**'
            shared:
              - 'packages/shared/**'

  # Test and lint backend package
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.shared == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint backend
        run: bun run --filter=backend lint:check

      - name: Format check backend
        run: bun run --filter=backend format:check

      - name: Build shared package
        run: bun run --filter=shared build

      - name: Type check backend
        run: bun run --filter=backend build

      - name: Test backend
        run: bun run --filter=backend test:run

  # Test and lint frontend package
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint frontend
        run: bun run --filter=frontend lint:check

      - name: Format check frontend
        run: bun run --filter=frontend format:check

      - name: Build shared package
        run: bun run --filter=shared build

      - name: Type check frontend
        run: bun run --filter=frontend build

      - name: Test frontend
        run: bun run --filter=frontend test:run

  # Test shared package (runs when shared changes)
  test-shared:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.shared == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint shared
        run: bun run --filter=shared lint:check

      - name: Format check shared
        run: bun run --filter=shared format:check

      - name: Type check shared
        run: bun run --filter=shared build

  # Check if all tests passed or were skipped (no failures)
  check-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-shared]
    if: always()
    outputs:
      result: ${{ steps.check.outputs.result }}
    steps:
      - id: check
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "❌ One or more tests failed"
          else
            echo "result=success" >> $GITHUB_OUTPUT
            echo "✅ All tests passed or were skipped"
          fi

  # Build unified Docker image (contains both frontend and backend)
  build-unified:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: >-
      ${{
        (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true') &&
        (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      }}

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build unified image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker

  # Push unified Docker image only if build succeeded and all tests passed
  push-image:
    runs-on: ubuntu-latest
    needs: [build-unified, check-tests]
    if: >-
      ${{
        needs.build-unified.result == 'success' &&
        needs.check-tests.result == 'success'
      }}

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push unified image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to staging/production
  deploy:
    runs-on: ubuntu-latest
    needs: [push-image]
    if: ${{ needs.push-image.result == 'success' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deployment step - configure based on your hosting platform"
          echo "Unified image push: ${{ needs.push-image.result }}"
          # Add deployment commands here (Railway, Render, etc.)
